#+TITLE: Primary Emacs Config
#+AUTHOR: Cole Neville
#+EMAIL: primary@coleneville.com
#+OPTIONS: num:nil

This gets packaged into ./config.el by org-babel-eval-in-repl imported by the init.el.

** Package Definitions
*** Package Auto Update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :commands (auto-package-update-maybe)
    :custom
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t))
#+END_SRC
*** Modus Theme Config and Setup
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure t
    :custom
    (modus-themes-common-palette-overrides
     `((border-mode-line-active bg-mode-line-active)
       (border-mode-line-inactive bg-mode-line-inactive)))
    (modus-vivendi-palette-overrides
     `((bg-main "#161616"))))
#+END_SRC
*** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :commands (which-key-mode)
    :bind (("M-h" . which-key-show-top-level))
    :custom
    (which-key-idle-delay 0.5))
#+END_SRC
*** Ace Window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("C-x S" . ace-window)))
#+END_SRC
*** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker :ensure t)
#+END_SRC
*** Magit (Git Integration)
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)
#+END_SRC
*** VTerm
#+BEGIN_SRC emacs-lisp
  (use-package vterm :ensure t)
#+END_SRC
*** Ledger Mode
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :commands (ledger-mode)
    :hook (ledger-mode . flymake-mode))
#+END_SRC
*** Nix Mode
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
    :ensure t
    :commands (nix-mode))
#+END_SRC
*** Dockerfile Mode
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :commands (dockerfile-mode))
#+END_SRC
*** Docker Compose Mode
#+begin_src emacs-lisp
  (use-package docker-compose-mode
    :ensure t
    :commands (docker-compose-mode))
#+end_src
*** Robe (Enhanced Ruby Mode)
#+begin_src emacs-lisp
  (use-package robe
    :ensure
    :commands (robe-mode))
#+end_src
*** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :commands (rainbow-delimiters-mode))
#+end_src
*** Company Mode (Code Completion)
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :custom
    (company-tooltip-align-annotations t)
    (company-tooltip-display 'lines)
    (company-tooltip-flip-when-above t)
    (company-tooltip-margin 3)
    (company-tooltip-maximum-width 60)
    (company-frontends '(company-pseudo-tooltip-frontend
			 company-preview-if-just-one-frontend))
    :commands (global-company-mode))
#+end_src
*** Counsel/Ivy (Searching)
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :custom
    (ivy-dynamic-exhibit-delay-ms 250)
    :commands (counsel-mode
	       ivy-mode)
    :bind (("C-f" . counsel-grep)
	   ("C-s" . counsel-projectile-grep)))

  (use-package counsel-projectile
    :ensure t
    :commands (counsel-projectile-mode))
#+end_src
*** Projectile (Project Functionality)
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :commands (projectile-mode)
    :bind (:map projectile-mode-map
		("C-x p" . projectile-command-map)))
#+end_src
*** Treemacs (Left Side Directory Tree)
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :custom
    (treemacs-width 45)
    :commands (treemacs)
    :config
    (treemacs-follow-mode 1)
    (treemacs-git-commit-diff-mode 1))

  (use-package treemacs-projectile :ensure t)
#+end_src
** Main Config
*** Setting Variables (not for packages)
#+BEGIN_SRC emacs-lisp
  (setq visible-bell t
	ring-bell-function 'ignore)

  (setq inhibit-startup-screen t
	inhibit-startup-message t)

  (setq display-line-numbers-minor-tick 5
	  display-line-numbers-major-tick 25
	  display-line-numbers-width 4)
#+END_SRC
*** Run Startup Functions
#+BEGIN_SRC emacs-lisp
  (load-theme 'modus-vivendi t)
  (auto-package-update-maybe)
#+END_SRC
*** Enable/Disable Minor Modes
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tab-bar-mode -1)
  (line-number-mode -1)

  (which-key-mode)
  (global-company-mode)

  (projectile-mode)
  (counsel-mode)
  (counsel-projectile-mode)

  (treemacs)
#+END_SRC
*** Hook Setup
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'flymake-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

  (add-hook 'ruby-mode-hook 'robe-mode)

  (add-hook 'ledger-mode-hook 'flymake-mode)
#+END_SRC
*** Keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "C-z") 'ignore)
#+end_src
